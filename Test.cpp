#include "mat.hpp"
using namespace ariel;
#include <string.h>
#include <algorithm>
using namespace std;
#include "doctest.h"


TEST_CASE("greatInput")
{

	CHECK_FALSE((mat(5,3,'-','#')) == ("$$$$$\n$---$\n$$$$$"));

	CHECK((mat(3,5,'!','?')) == ("!!!\n!?!\n!!!"));

	CHECK((mat(7,3,'#','&')) == ("#######\n#&&&&&#\n#######")); 

	CHECK((mat(3,7,'@','#')) == ("@@@\n@#@\n@#@\n@#@\n@#@\n@#@\n@@@")); 

    CHECK((mat(5,3,'$','-')) == ("$$$$$\n$---$\n$$$$$"));
    
    CHECK((mat(5,3,'*','@')) == ("*****\n*@@@*\n*****")); 

    CHECK_FALSE((mat(3,5,'*','&')) == ("***\n*$*\n***")); 
    
    CHECK((mat(5,3,'#','&')) == ("#####\n#&&&#\n#####")); 

    CHECK((mat(3,5,'*','#')) == ("***\n*#*\n***")); 

    CHECK((mat(9, 5,'-','@')) == ("---------\n-@@@@@@@-\n-@-----@-\n-@@@@@@@-\n---------\n"));

    CHECK((mat(9, 3,'@','!')) == ("@@@@@@@@@\n@!!!!!!!@\n@@@@@@@@@\n")); 
    
    CHECK((mat(3,5,'!','%')) == ("!!!\n!%!\n!!!"));
    
    CHECK_FALSE((mat(5,3,'$','#')) == ("$$$$$\n$###$\n$$$$$"));

    CHECK((mat(3,5,'+','@')) == ("+++\n+@+\n+++")); 

    CHECK((mat(15, 5,'@','?')) == ("@@@@@@@@@@@@@@@\n@?????????????@\n@?@@@@@@@@@@@@?@\n@?????????????@\n@@@@@@@@@@@@@@@\n"));


    CHECK_FALSE((mat(5,3,'?','~')) == ("$$$$$\n$---$\n$$$$$"));

    CHECK_NOTHROW(mat(3,5,'$','&'));

    CHECK_THROWS(mat(4, 5, '&','+'));

    CHECK_EQ((mat(1,3,'@','-')),(mat(1,3,'@','!')));

    CHECK_NE((mat(13, 5,'@','-')),(mat(7, 3, '@', '-')));

    CHECK((mat(9, 3,'(',')')) == ("(((((((((\n()))))))(-\n(((((((((\n"));

    
    CHECK((mat(9, 5, '@','&')) == ("@@@@@@@@@\n@&&&&&&&@\n@&@@@@@&@\n@&&&&&&&@\n@@@@@@@@@\n"));

    CHECK((mat(10, 5, '&','-')) == ("&&&&&&&&&&\n&-------&\n&-&&&&&-&\n&-------&\n&&&&&&&&&\n"));
    
    CHECK_FALSE((mat(3,3,'*','&')) == ("***\n*&*\n***"));
	
    CHECK((mat(5,3,'@','%')) == ("@@@@@\n@%%%@\n@@@@@"));
    




}